generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String  @id @default(cuid())
  clerkId            String  @unique
  email              String  @unique
  firstName          String?
  publicName         String?
  publicNameApproved Boolean @default(false)

  role             Role @default(USER)
  totalBadgeLevels Int  @default(0)

  lastLogin DateTime?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())

  stripe   Stripe?
  streaks  Streak[]
  prompts  Prompt[]
  memories Memory[]
}

model Stripe {
  id                     String    @id @default(cuid())
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  userId                 String    @unique
  updatedAt              DateTime  @updatedAt
  createdAt              DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Prompt {
  id String @id @default(cuid())

  prompt       Json
  promptTokens Int?

  completion       String?
  completionTokens Int?
  maxTokens        Int?

  model             String?
  temperature       Float?
  openaiRunId       String?
  openaiAssistantId String?
  openaiThreadId    String?

  userId   String
  memoryId String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  memory Memory? @relation(fields: [memoryId], references: [id], onDelete: Cascade)
}

model Streak {
  id String @id @default(cuid())

  userId String

  lastDate          DateTime
  daysCount         Int      @default(1)
  todayLearnedCount Int      @default(1)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SignIn {
  id String @id @default(cuid())

  email String

  createdAt DateTime @default(now())
}

model Memory {
  id String @id @default(cuid())

  userId      String
  deckSlug    String
  snippetSlug String

  openaiThreadId String?
  openaiChat     Json?

  repetition       Int
  eFactor          Decimal @db.Decimal(4, 2)
  interval         Decimal @db.Decimal(9, 5)
  numberOfMistakes Int[]
  isLearned        Boolean @default(false)

  dateTimeRepeated    DateTime?
  dateTimePlanned     DateTime
  dateTimeLastMistake DateTime?
  dateTimeClaimed     DateTime?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompts Prompt[]

  @@unique([userId, deckSlug, snippetSlug])
}
